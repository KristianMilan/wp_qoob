---
title: Basics
active_menu: Basics
main_menu: dev
---

<h1>Basics</h1>
<p>Smart framework consists of smart modules. Each module is designed to be able to use it from any part of wordpress:</p>
<ul>
<li>Wordpress plugin</li>
<li>Part of theme</li>
<li>Submodule in other modules</li>
</ul>
<p>Because of this modular system you can easy customize SmartBuilder for your use. Add or remove modules without breaking core. Even use two or more the same modules without conflicts.</p>
<h2>Module directory structure </h2>
<pre><code class="Markdown">index.php - Entry point. To add your module you need include this file
includes\ - modulename.class.php located here and other php files
assets\ - Directory for assets
assets\img\ - Directory for images
assets\js\ - Directory for JavaScript files
assets\css\ - Directory for Styles
templates\ - Directory with templates
modules\ - Submodules for this module
</code></pre>
<h3>Modules directory</h3>
<p>
Any module can has nested submodules. These submodules can have their submodules. And so on. By default submodules located in &quot;modules&quot; dir of module.</p>
<h3>Module class</h3>
<p>
Each module has module class. Module class should be inherit from &quot;SmartModule&quot; class. Class name is also module name.</p>
<h3>Includes directory</h3>
<p>
All files from this directory will be included automatic. File with module class should be here.</p>
<h3>Assets directory</h3>
<p>
Images, JavaScript files, CSS files and other public files located in this folder.</p>
<h3>Templates directory</h3>
<p>
Smart framework follows the rule: <em>No HTML/CSS/JS code in PHP classes</em>.
Static HTML/JS/CSS located in assets folder. Dynamic HTML/JS/CSS located in templates folder. What does it means &quot;dynamic&quot;? It means that HTML/JS/CSS code will be created from php template.</p>
<h2>Modules initialization</h2>
<h3>Loading modules</h3>
<p>Each module inherit <code>SmartModule</code> class. <code>SmartModule</code> class located in root module. We call this module <code>Smart</code>. Obviously, all our modules will be loaded after <code>Smart</code> module. If we try to load some module before module <code>Smart</code> has been loaded we should return and load this module later. We use action <code>Smart_load_module</code> for do this &quot;lazy&quot; loading.</p>
<p>If module <code>Smart</code> loaded we do next steps:</p>
<ol>
<li>Load all submodules from &quot;modules&quot; directory</li>
<li>Include all files from include dir and register module class. This occurs only if module class has not been initialized before.</li>
</ol>
<h3>Registration module</h3>
<p>All modules registering in specific order. We need register <code>SmartComponentText</code> module after <code>SmartComponent</code> module. <code>SmartShortCodes</code> should be registered after <code>Smart</code> module. This is accomplished due to the dependency system. How it work?
<code>index.php</code> is file who responsible for this. Let`s see:</p>
<pre><code class="php">if (defined(&#39;ABSPATH&#39;)) {

    $module = &quot;SmartComponentTest&quot;; //Module Name the same as class name
    $dependency = &quot;SmartComponent&quot;; //Load after module SmartComponent will be loaded

    ...
</code></pre>
<p>Once module registered it call:</p>
<pre><code class="php">do_action(MODULE_NAME.&quot;_loaded&quot;);
</code></pre>
<h3>Conclusion</h3>
<p>As you see smart modules is very flexible to use. For example you can:</p>
<ol>
<li>Have different plugins. This plugins have the same submodule. Only one of this modules will be registered, but all their submodules will be loaded.</li>
<li>Have module in theme. And other module in plugins dir. They all will be loaded and registered the same way, no matter where module located.</li>
</ol>
<h2>Module dependency</h2>
<p><img src="img/depend.jpg" alt="" width="100%"></p>
<h2>Modules list</h2>
<p>Access to registered module list:</p>
<pre><code class="php">global $smart;
$smart-&gt;modules();            // return all modules
$smart-&gt;modules(&#39;component&#39;); // return all modules with type &#39;component&#39;
$smart-&gt;modules(&#39;animation&#39;); // return all modules with type &#39;animation&#39;
</code></pre>